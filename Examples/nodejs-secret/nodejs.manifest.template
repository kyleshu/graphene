# Nodejs manifest file example
#
# This manifest was prepared and tested on Ubuntu 18.04.

loader.argv0_override = "nodejs"

# LibOS layer library of Graphene. There is currently only one implementation,
# so it is always set to libsysdb.so.
loader.preload = "file:$(GRAPHENEDIR)/Runtime/libsysdb.so"

# Show/hide debug log of Graphene ('inline' or 'none' respectively).
loader.debug_type = "$(GRAPHENEDEBUG)"

# Read application arguments directly from the command line. Don't use this on production!
loader.insecure__use_cmdline_argv = 1

# Specify paths to search for libraries. The usual LD_LIBRARY_PATH syntax
# applies. Paths must be in-Graphene visible paths, not host-OS paths (i.e.,
# paths must be taken from fs.mount.xxx.path, not fs.mount.xxx.uri).
loader.env.LD_LIBRARY_PATH = "/lib:/usr/lib:$(ARCH_LIBDIR):/usr/$(ARCH_LIBDIR):./"

# Mount host-OS directory to required libraries (in 'uri') into in-Graphene
# visible directory /lib (in 'path').
fs.mount.lib.type = "chroot"
fs.mount.lib.path = "/lib"
fs.mount.lib.uri = "file:$(GRAPHENEDIR)/Runtime"

fs.mount.lib2.type = "chroot"
fs.mount.lib2.path = "$(ARCH_LIBDIR)"
fs.mount.lib2.uri = "file:$(ARCH_LIBDIR)"

#fs.mount.lib3.type = "chroot"
#fs.mount.lib3.path = "/usr/$(ARCH_LIBDIR)"
#fs.mount.lib3.uri = "file:/usr/$(ARCH_LIBDIR)"

fs.mount.usr.type = "chroot"
fs.mount.usr.path = "/usr"
fs.mount.usr.uri = "file:/usr"

# Host-level directory to NSS files required by Glibc + NSS libs
fs.mount.etc.type = "chroot"
fs.mount.etc.path = "/etc"
fs.mount.etc.uri = "file:/etc"

# Workload needs to create temporary files
fs.mount.tmp.type = "chroot"
fs.mount.tmp.path = "/tmp"
fs.mount.tmp.uri = "file:/tmp"

# Set enclave size to 2GB; NodeJS expects around 1.7GB of heap on startup,
# see e.g. https://github.com/nodejs/node/issues/13018.
# Recall that SGX v1 requires to specify enclave size at enclave creation time.
sgx.enclave_size = "4G"

# Set maximum number of in-enclave threads (somewhat arbitrarily) to 8. Recall
# that SGX v1 requires to specify the maximum number of simultaneous threads at
# enclave creation time.
sgx.thread_num = 64

# Specify all libraries used by Node.js and its dependencies (including all libs
# which can be loaded at runtime via dlopen).
sgx.trusted_files.ld = "file:$(GRAPHENEDIR)/Runtime/ld-linux-x86-64.so.2"
sgx.trusted_files.libc = "file:$(GRAPHENEDIR)/Runtime/libc.so.6"
sgx.trusted_files.libm = "file:$(GRAPHENEDIR)/Runtime/libm.so.6"
sgx.trusted_files.libdl = "file:$(GRAPHENEDIR)/Runtime/libdl.so.2"
sgx.trusted_files.librt = "file:$(GRAPHENEDIR)/Runtime/librt.so.1"
sgx.trusted_files.libutil = "file:$(GRAPHENEDIR)/Runtime/libutil.so.1"
sgx.trusted_files.libpthread = "file:$(GRAPHENEDIR)/Runtime/libpthread.so.0"
sgx.trusted_files.libnssdns = "file:$(GRAPHENEDIR)/Runtime/libnss_dns.so.2"
sgx.trusted_files.libresolv = "file:$(GRAPHENEDIR)/Runtime/libresolv.so.2"

sgx.trusted_files.libstdc = "file:/usr/$(ARCH_LIBDIR)/libstdc++.so.6"
sgx.trusted_files.libgccs = "file:$(ARCH_LIBDIR)/libgcc_s.so.1"
sgx.trusted_files.libaptpkg = "file:/usr/$(ARCH_LIBDIR)/libapt-pkg.so.5.0"
sgx.trusted_files.liblz4 = "file:/usr/$(ARCH_LIBDIR)/liblz4.so.1"
sgx.trusted_files.libsystemd = "file:$(ARCH_LIBDIR)/libsystemd.so.0"
sgx.trusted_files.libselinux = "file:$(ARCH_LIBDIR)/libselinux.so.1"
sgx.trusted_files.libgcrypt = "file:$(ARCH_LIBDIR)/libgcrypt.so.20"
sgx.trusted_files.libpcre = "file:$(ARCH_LIBDIR)/libpcre.so.3"
sgx.trusted_files.libgpgerror = "file:$(ARCH_LIBDIR)/libgpg-error.so.0"
sgx.trusted_files.libexpat = "file:$(ARCH_LIBDIR)/libexpat.so.1"
sgx.trusted_files.libz = "file:$(ARCH_LIBDIR)/libz.so.1"
sgx.trusted_files.libz2 = "file:$(ARCH_LIBDIR)/libbz2.so.1.0"
sgx.trusted_files.liblzma = "file:$(ARCH_LIBDIR)/liblzma.so.5"
sgx.trusted_files.libmpdec = "file:/usr/$(ARCH_LIBDIR)/libmpdec.so.2"

# Name Service Switch (NSS) libraries (Glibc dependencies)
sgx.trusted_files.libnssfiles = "file:$(ARCH_LIBDIR)/libnss_files.so.2"
sgx.trusted_files.libnsscompat = "file:$(ARCH_LIBDIR)/libnss_compat.so.2"
sgx.trusted_files.libnssnis = "file:$(ARCH_LIBDIR)/libnss_nis.so.2"
sgx.trusted_files.libnsl = "file:$(ARCH_LIBDIR)/libnsl.so.1"
sgx.trusted_files.libnssmyhostname = "file:$(ARCH_LIBDIR)/libnss_myhostname.so.2"
sgx.trusted_files.libnssmdns = "file:$(ARCH_LIBDIR)/libnss_mdns4_minimal.so.2"

# Scratch space
sgx.allowed_files.tmp = "file:/tmp"

# APT config files
sgx.allowed_files.aptconfd = "file:/etc/apt/apt.conf.d"
sgx.allowed_files.aptconf = "file:/etc/apt/apt.conf"
sgx.allowed_files.apport = "file:/etc/default/apport"

# Name Service Switch (NSS) files (Glibc reads these files)
sgx.allowed_files.nsswitch = "file:/etc/nsswitch.conf"
sgx.allowed_files.group = "file:/etc/group"
sgx.allowed_files.passwd = "file:/etc/passwd"

# DNS hostname resolution files (Glibc reads these files)
sgx.allowed_files.hostconf = "file:/etc/host.conf"
sgx.allowed_files.hosts = "file:/etc/hosts"
sgx.allowed_files.gaiconf = "file:/etc/gai.conf"
sgx.allowed_files.resolv = "file:/etc/resolv.conf"

sgx.allowed_files.openssl = "file:/etc/ssl/openssl.cnf"

# System's file system table
sgx.allowed_files.fstab = "file:/etc/fstab"

$(NODEJS_TRUSTED_LIBS)

# JavaScript (trusted)
sgx.trusted_files.javascript = "file:readWrite.js"
sgx.protected_files.readme = "file:README.md"

sys.insecure__allow_eventfd = 1

sgx.remote_attestation = 1

loader.env.LD_PRELOAD = "libsecret_prov_attest.so"
loader.env.SECRET_PROVISION_CONSTRUCTOR = "1"
loader.env.SECRET_PROVISION_SET_PF_KEY = "1"
loader.env.SECRET_PROVISION_CA_CHAIN_PATH = "certs/test-ca-sha256.crt"
loader.env.SECRET_PROVISION_SERVERS = "localhost:4433"
loader.env.SECRET_PROVISION_CC_SERVERS = "ANOTHER_SECRET=localhost:4433"

sgx.trusted_files.libsecretprovattest = "file:libsecret_prov_attest.so"
sgx.trusted_files.cachain = "file:certs/test-ca-sha256.crt"

# Specify your SPID and linkable/unlinkable attestation policy
sgx.ra_client_spid = "DF3A8BA098E93F66CC64E8A215E98333"
sgx.ra_client_linkable = 0
